@model IEnumerable<ParentChild.Models.Parent>

<header>
    <nav class="navbar navbar-static-top navbar-inverse" role="navigation">
        <a class="navbar-brand" href="#">PCB</a>
        <form id="search" class="navbar-form form-inline" role="search">
            <div class="input-group">
                <input type="text" name="query" class="form-control" placeholder="Search"/>
                <span class="input-group-btn">
                    <input type="submit" name="search" class="btn btn-default" value="Go" />
                </span> 
            </div>
        </form>
    </nav>
</header>
<section id="message"></section>
<section id="application"></section>

@section scripts
{
    <script>
        var ParentChild = function() {
            var Models = (function() {
                var Parent = Backbone.Model.extend({
                    idAttribute: 'Id',
                    urlRoot: 'api/parent',
                    validate: function(attrs, options) {
                        if (attrs.Name.length < 1) {
                            return 'Parent name is required';
                        }
                    }
                });

                var Child = Backbone.Model.extend({
                    idAttribute: 'Id',
                    urlRoot: 'api/child',
                    validate: function (attrs, options) {
                        if (attrs.Name.length < 1) {
                            return 'Child name is required';
                        }
                    }
                });

                var Alert = Backbone.Model.extend();

                var Meta = Backbone.Model.extend({
                    url: 'api/parent?meta'
                });
                
                return {
                    Parent: Parent,
                    Child: Child,
                    Alert: Alert,
                    Meta: Meta
                };
            })();

            var Collections = (function() {
                var Parents = Backbone.Collection.extend({
                    model: Models.Parent,
                    url: function () {
                        var root = 'api/parent';
                        if (this.query) {
                            return root + '?query=' + this.query + '&page=' + this.page;
                        } else {
                            return root + '?page=' + this.page;
                        }
                    },
                    initialize: function () {
                        this.page = 1;
                    },
                    search: function(query) {
                        this.query = query;
                        this.fetch();
                    },
                    all: function() {
                        this.query = false;
                        this.fetch();
                    },
                    previousPage: function () {
                        this.changePage(-1);
                    },
                    nextPage: function () {
                        this.changePage(1);
                    },
                    changePage: function(delta) {
                        this.setPage(this.page + delta);
                    },
                    setPage: function(page) {
                        this.page = page;
                        this.fetch();
                    }
                });

                var Children = Backbone.Collection.extend({
                    model: Models.Child,
                    url: 'api/child'
                });

                return {
                    Parents: Parents,
                    Children: Children
                };
            })();

            var Views = (function () {
                var Paginator = Backbone.View.extend({
                    template: _.template(
                        '<button type="button" class="btn btn-link previous">&lt;&nbsp;Previous</button>' +
                        '<span class="pages" />' +
                        '<button type="button" class="btn btn-link next">Next&nbsp;&gt;</button>'
                    ),
                    events: {
                        'click .previous': 'previousPage',
                        'click .next': 'nextPage'
                    },
                    initialize: function (options) {
                        this.page = options.page;
                        this.listenTo(this.model, 'change', this.render);
                    },
                    render: function () {
                        this.$el.html(this.template());
                        _(this.model.get('PageCount')).chain().range().each(function (page) {
                            var view = new Page({
                                page: page + 1
                            });
                            this.listenTo(view, 'page:goto', this.gotoPage);
                            this.$('.pages').append(view.render().el);
                        }, this);
                        this.toggleButtons();
                        return this;
                    },
                    previousPage: function () {
                        this.trigger('page:previous');
                    },
                    nextPage: function () {
                        this.trigger('page:next');
                    },
                    gotoPage: function (page) {
                        this.trigger('page:goto', page);
                    },
                    toggleButtons: function() {
                        this.$('.previous').prop('disabled', this.page == 1);
                        this.$('.next').prop('disabled', this.page == this.model.get('PageCount'));
                    }
                });

                var Page = Backbone.View.extend({
                    tagName: 'button',
                    className: 'btn btn-link page',
                    events: {
                        'click': 'gotoPage',
                    },
                    initialize: function (options) {
                        this.page = options.page;
                    },
                    render: function () {
                        this.$el.text(this.page);
                        return this;
                    },
                    gotoPage: function () {
                        this.trigger('page:goto', this.page);
                    }
                });

                var ParentsList = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<button type="button" class="btn btn-link" name="createParent">Create Parent</button>'
                    ),
                    events: {
                        'submit': 'createParent',
                        'click button[name=createParent]': 'createParent',
                        'click button[name=editParent]': 'editParent',
                        'click button[name=destroyParent]': 'destroyParent',
                        'click button[name=createChild]': 'createChild',
                        'click button[name=editChild]': 'editChild',
                        'click button[name=destroyChild]': 'destroyChild'
                    },
                    render: function() {
                        this.$el.html(this.template());
                        this.collection.each(function(model) {
                            var view = new ParentsListItem({
                                model: model
                            });
                            this.$el.append(view.render().el);
                        }, this);
                        var meta = new Models.Meta();
                        this.listenToOnce(meta, 'sync', function(model) {
                            var paginator = new Paginator({
                                model: model,
                                page: this.collection.page
                            });
                            this.listenTo(paginator, 'page:previous', function () {
                                this.collection.previousPage();
                            });
                            this.listenTo(paginator, 'page:next', function () {
                                this.collection.nextPage();
                            });
                            this.listenTo(paginator, 'page:goto', function (page) {
                                this.collection.setPage(page);
                            });
                            this.$el.append(paginator.render().el);
                        });
                        meta.fetch();
                        return this;
                    },
                    createParent: function(event) {
                        event.preventDefault();
                        this.trigger('create:parent');
                        this.remove();
                    },
                    editParent: function(event) {
                        event.preventDefault();
                        this.trigger('edit:parent', $(event.currentTarget).data('id'));
                        this.remove();
                    },
                    destroyParent: function(event) {
                        event.preventDefault();
                        this.trigger('destroy:parent', $(event.currentTarget).data('id'));
                        this.remove();
                    },
                    createChild: function(event) {
                        event.preventDefault();
                        this.trigger('create:child', $(event.currentTarget).data('id'));
                        this.remove();
                    },
                    editChild: function(event) {
                        event.preventDefault();
                        this.trigger('edit:child', $(event.currentTarget).data('id'));
                        this.remove();
                    },
                    destroyChild: function(event) {
                        event.preventDefault();
                        this.trigger('destroy:child', $(event.currentTarget).data('id'));
                        this.remove();
                    }
                });

                var ParentsListItem = Backbone.View.extend({
                    template: _.template(
                        '<label>\n' +
                        '{{Name}}\n' +
                        '<button type="button" class="btn btn-link" name="createChild" data-id="{{Id}}">Create Child</button>\n' +
                        '<button type="button" class="btn btn-link" name="editParent" data-id="{{Id}}">Edit</button>\n' +
                        '<button type="button" class="btn btn-link" name="destroyParent" data-id="{{Id}}">Destroy</button>\n' +
                        '</label>'
                    ),
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        var view = new ChildrenList({
                            collection: new Collections.Children(
                                this.model.get('Children')
                            )
                        });
                        this.$el.append(view.render().el);
                        return this;
                    }
                });

                var ChildrenList = Backbone.View.extend({
                    tagName: 'ol',
                    render: function() {
                        this.collection.each(function(model) {
                            var view = new ChildrenListItem({
                                model: model
                            });
                            this.$el.append(view.render().el);
                        }, this);
                        return this;
                    }
                });

                var ChildrenListItem = Backbone.View.extend({
                    tagName: 'li',
                    template: _.template(
                        '<label>\n' +
                        '{{Name}}\n' +
                        '<button type="button" class="btn btn-link" name="editChild" data-id="{{Id}}">Edit</button>\n' +
                        '<button type="button" class="btn btn-link" name="destroyChild" data-id="{{Id}}">Destroy</button>\n' +
                        '</label>'
                    ),
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    }
                });

                var ParentCreate = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label class="control-label">\n' +
                        'Parent Name\n' +
                        '<input type="text" class="form-control" name="name" />\n' +
                        '</label>\n' +
                        '<span class="help-block"/>' +
                        '</div>\n' +
                        '<button type="submit" class="btn btn-primary" name="save">Save</button>\n' +
                        '<button type="button" class="btn btn-default" name="cancel">Cancel</button>'
                    ),
                    events: {
                        'keyup input[name=name]': 'setName',
                        'click button[name=save]': 'save',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'save'
                    },
                    initialize: function () {
                        this.listenTo(this.model, 'invalid', function(model, error) {
                            this.invalid(error);
                        });
                        this.listenToOnce(this.model, 'sync', function(model) {
                            this.trigger('created:parent', model);
                            this.trigger('alert', 'success', 'Parent ' + model.get('Name') + ' saved');
                            this.remove();
                        });
                    },
                    render: function() {
                        this.$el.html(this.template());
                        return this;
                    },
                    setName: function (event) {
                        this.model.set({
                            Name: this.$(event.currentTarget).val()
                        });
                        this.model.isValid()
                            ? this.valid()
                            : this.invalid(this.model.validationError);
                    },
                    valid: function () {
                        this.$('button[name=save]').prop('disabled', false);
                        this.$('.form-group').removeClass('has-error').addClass('has-success');
                        this.$('.help-block').empty();
                    },
                    invalid: function (error) {
                        this.$('button[name=save]').prop('disabled', true);
                        this.$('.form-group').removeClass('has-success').addClass('has-error');
                        this.$('.help-block').text(error);
                    },
                    save: function (event) {
                        event.preventDefault();
                        this.model.save({
                            Name: this.$('input[name=name]').val()
                        });
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.trigger('cancelled:parent');
                        this.trigger('alert', 'warning', 'Create new parent cancelled');
                        this.remove();
                    }
                });

                var ParentEdit = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label class="control-label">\n' +
                        'Parent Name\n' +
                        '<input type="text" class="form-control" name="name" value="{{Name}}" />\n' +
                        '</label>\n' +
                        '<span class="help-block"/>' +
                        '</div>\n' +
                        '<button type="submit" class="btn btn-primary" name="update">Update</button>\n' +
                        '<button type="button" class="btn btn-default" name="cancel">Cancel</button>'
                    ),
                    events: {
                        'keyup input[name=name]': 'setName',
                        'click button[name=update]': 'update',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'update'
                    },
                    initialize: function () {
                        this.listenTo(this.model, 'invalid', function (model, error) {
                            this.invalid(error);
                        });
                        this.listenToOnce(this.model, 'sync', function (model) {
                            this.trigger('updated:parent', model);
                            this.trigger('alert', 'success', 'Parent ' + model.get('Name') + ' updated');
                            this.remove();
                        });
                    },
                    render: function () {
                        this.store();
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    setName: function (event) {
                        this.model.set({
                            Name: this.$(event.currentTarget).val()
                        });
                        this.model.isValid()
                            ? this.valid()
                            : this.invalid(this.model.validationError);
                    },
                    valid: function () {
                        this.$('button[name=update]').prop('disabled', false);
                        this.$('.form-group').removeClass('has-error').addClass('has-success');
                        this.$('.help-block').empty();
                    },
                    invalid: function (error) {
                        this.$('button[name=update]').prop('disabled', true);
                        this.$('.form-group').removeClass('has-success').addClass('has-error');
                        this.$('.help-block').text(error);
                    },
                    update: function (event) {
                        event.preventDefault();
                        this.model.save({
                            Name: this.$('input[name=name]').val()
                        });
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.restore();
                        this.trigger('cancelled:parent');
                        this.trigger('alert', 'warning', 'Edit parent ' + this.model.get('Name') + ' cancelled');
                        this.remove();
                    },
                    store: function () {
                        this.original = _.clone(this.model.attributes);
                    },
                    restore: function () {
                        this.model.set(this.original);
                    }
                });

                var ParentDestroy = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label>\n' +
                        'Are you sure you want to destroy {{Name}}?\n' +
                        '</label>\n' +
                        '</div>\n' +
                        '<button type="button" class="btn btn-danger" name="confirm">Yes</button>\n' +
                        '<button type="submit" class="btn btn-primary" name="cancel">No</button>'
                    ),
                    events: {
                        'click button[name=confirm]': 'confirm',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'cancel'
                    },
                    initialize: function() {
                        this.listenToOnce(this.model, 'sync', function(model) {
                            this.trigger('destroyed:parent');
                            this.trigger('alert', 'success', 'Parent ' + model.get('Name') + ' destroyed');
                            this.remove();
                        });
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    confirm: function(event) {
                        event.preventDefault();
                        this.model.destroy();
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.trigger('cancelled:parent');
                        this.trigger('alert', 'warning', 'Destroy parent ' + this.model.get('Name') + ' cancelled');
                        this.remove();
                    }
                });

                var ChildCreate = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label class="control-label">\n' +
                        'Child Name\n' +
                        '<input type="text" class="form-control" name="name" />\n' +
                        '</label>\n' +
                        '<span class="help-block"/>' +
                        '</div>\n' +
                        '<button type="submit" class="btn btn-primary" name="save">Save</button>\n' +
                        '<button type="button" class="btn btn-default" name="cancel">Cancel</button>'
                    ),
                    events: {
                        'keyup input[name=name]': 'setName',
                        'click button[name=save]': 'save',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'save'
                    },
                    initialize: function() {
                        this.listenTo(this.model, 'invalid', function (model, error) {
                            this.invalid(error);
                        });
                        this.listenToOnce(this.model, 'sync', function (model) {
                            this.trigger('created:child', model);
                            this.trigger('alert', 'success', 'Child ' + model.get('Name') + ' saved');
                            this.remove();
                        });
                    },
                    render: function() {
                        this.$el.html(this.template());
                        return this;
                    },
                    setName: function (event) {
                        this.model.set({
                            Name: this.$(event.currentTarget).val()
                        });
                        this.model.isValid()
                            ? this.valid()
                            : this.invalid(this.model.validationError);
                    },
                    valid: function () {
                        this.$('button[name=save]').prop('disabled', false);
                        this.$('.form-group').removeClass('has-error').addClass('has-success');
                        this.$('.help-block').empty();
                    },
                    invalid: function (error) {
                        this.$('button[name=save]').prop('disabled', true);
                        this.$('.form-group').removeClass('has-success').addClass('has-error');
                        this.$('.help-block').text(error);
                    },
                    save: function (event) {
                        event.preventDefault();
                        this.model.save({
                            Name: this.$('input[name=name]').val()
                        });
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.trigger('cancelled:child');
                        this.trigger('alert', 'warning', 'Create new child cancelled');
                        this.remove();
                    }
                });

                var ChildEdit = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label class="control-label">\n' +
                        'Child Name\n' +
                        '<input type="text" class="form-control" name="name" value="{{Name}}" />\n' +
                        '</label>\n' +
                        '<span class="help-block"/>' +
                        '</div>\n' +
                        '<button type="submit" class="btn btn-primary" name="update">Update</button>\n' +
                        '<button type="button" class="btn btn-default" name="cancel">Cancel</button>'
                    ),
                    events: {
                        'keyup input[name=name]': 'setName',
                        'click button[name=update]': 'update',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'update'
                    },
                    initialize: function () {
                        this.listenTo(this.model, 'invalid', function (model, error) {
                            this.invalid(error);
                        });
                        this.listenToOnce(this.model, 'sync', function (model) {
                            this.trigger('updated:child', model);
                            this.trigger('alert', 'success', 'Child ' + model.get('Name') + ' updated');
                            this.remove();
                        });
                    },
                    render: function () {
                        this.store();
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    setName: function(event) {
                        this.model.set({
                            Name: this.$(event.currentTarget).val()
                        });
                        this.model.isValid()
                            ? this.valid()
                            : this.invalid(this.model.validationError);
                    },
                    valid: function() {
                        this.$('button[name=update]').prop('disabled', false);
                        this.$('.form-group').removeClass('has-error').addClass('has-success');
                        this.$('.help-block').empty();
                    },
                    invalid: function(error) {
                        this.$('button[name=update]').prop('disabled', true);
                        this.$('.form-group').removeClass('has-success').addClass('has-error');
                        this.$('.help-block').text(error);
                    },
                    update: function(event) {
                        event.preventDefault();
                        this.model.save({
                            Name: this.$('input[name=name]').val()
                        });
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.restore();
                        this.trigger('cancelled:child');
                        this.trigger('alert', 'warning', 'Edit child ' + this.model.get('Name') + ' cancelled');
                        this.remove();
                    },
                    store: function() {
                        this.original = _.clone(this.model.attributes);
                    },
                    restore: function() {
                        this.model.set(this.original);
                    }
                });

                var ChildDestroy = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label>\n' +
                        'Are you sure you want to destroy {{Name}}?\n' +
                        '</label>\n' +
                        '</div>\n' +
                        '<button type="button" class="btn btn-danger" name="confirm">Yes</button>\n' +
                        '<button type="submit" class="btn btn-primary" name="cancel">No</button>'
                    ),
                    events: {
                        'click button[name=confirm]': 'confirm',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'cancel'
                    },
                    initialize: function() {
                        this.listenToOnce(this.model, 'sync', function(model) {
                            this.trigger('destroyed:child', model);
                            this.trigger('alert', 'success', 'Child ' + model.get('Name') + ' destroyed');
                            this.remove();
                        });
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    confirm: function(event) {
                        event.preventDefault();
                        this.model.destroy();
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.trigger('cancelled:child');
                        this.trigger('alert', 'warning', 'Destroy child ' + this.model.get('Name') + ' cancelled');
                        this.remove();
                    }
                });

                var message = new (Backbone.View.extend({
                    template: _.template(
                        '<div class="alert alert-{{Type}}">{{Message}}</div>'
                    ),
                    initialize: function() {
                        this.listenTo(this.model, 'change', this.render);
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    }
                }))({
                    el: '#message',
                    model: new Models.Alert()
                });

                var search = new (Backbone.View.extend({
                    events: {
                        'submit': 'search'
                    },
                    search: function(event) {
                        event.preventDefault();
                        this.trigger('search', this.$('input[name=query]').val());
                    }
                }))({
                    el: '#search'
                });

                var application = new (Backbone.View.extend({
                    initialize: function () {
                        this.listenTo(search, 'search', function(query) {
                            this.collection.search(query);
                        });
                        search.render();
                        this.listenTo(this.collection, 'sync', this.render);
                    },
                    render: function() {
                        var view = new ParentsList({
                            collection: this.collection
                        });
                        this.listenTo(view, 'create:parent', this.createParent);
                        this.listenTo(view, 'edit:parent', this.editParent);
                        this.listenTo(view, 'destroy:parent', this.destroyParent);
                        this.listenTo(view, 'create:child', this.createChild);
                        this.listenTo(view, 'edit:child', this.editChild);
                        this.listenTo(view, 'destroy:child', this.destroyChild);
                        this.$el.html(view.render().el);
                    },
                    showMessage: function(type, msg) {
                        message.model.set({
                            Type: type,
                            Message: msg
                        });
                        message.render();
                    },
                    createParent: function() {
                        var view = new ParentCreate({
                            model: new Models.Parent()
                        });
                        this.listenTo(view, 'created:parent', function(model) {
                            this.collection.add(model);
                        });
                        this.listenTo(view, 'created:parent cancelled:parent', this.render);
                        this.listenTo(view, 'alert', this.showMessage);
                        this.$el.html(view.render().el);
                    },
                    editParent: function(id) {
                        var view = new ParentEdit({
                            model: this.collection.get(id)
                        });
                        this.listenTo(view, 'updated:parent cancelled:parent', this.render);
                        this.listenTo(view, 'alert', this.showMessage);
                        this.$el.html(view.render().el);
                    },
                    destroyParent: function(id) {
                        var view = new ParentDestroy({
                            model: this.collection.get(id)
                        });
                        this.listenTo(view, 'destroyed:parent cancelled:parent', this.render);
                        this.listenTo(view, 'alert', this.showMessage);
                        this.$el.html(view.render().el);
                    },
                    createChild: function(parentId) {
                        var view = new ChildCreate({
                            model: new Models.Child({
                                ParentId: parentId
                            })
                        });
                        this.listenTo(view, 'created:child', function(child) {
                            var parent = this.collection.get(child.get('ParentId'));
                            var children = parent.get('Children');
                            children.push(child);
                        });
                        this.listenTo(view, 'created:child cancelled:child', this.render);
                        this.listenTo(view, 'alert', this.showMessage);
                        this.$el.html(view.render().el);
                    },
                    editChild: function (id) {
                        this.getChild(id, function(model) {
                            var view = new ChildEdit({
                                model: model
                            });
                            this.listenTo(view, 'updated:child', function(child) {
                                var parent = this.collection.get(child.get('ParentId'));
                                var children = parent.get('Children');
                                for (var i = 0; i < children.length; i++) {
                                    if (child.get('Id') === children[i].Id) {
                                        children.splice(i, 1, child);
                                        break;
                                    }
                                }
                            });
                            this.listenTo(view, 'updated:child cancelled:child', this.render);
                            this.listenTo(view, 'alert', this.showMessage);
                            this.$el.html(view.render().el);
                        });
                    },
                    destroyChild: function (id) {
                        this.getChild(id, function (model) {
                            var view = new ChildDestroy({
                                model: model
                            });
                            this.listenTo(view, 'destroyed:child', function(child) {
                                var parent = this.collection.get(child.get('ParentId'));
                                var children = parent.get('Children');
                                for (var i = 0; i < children.length; i++) {
                                    if (child.get('Id') === children[i].Id) {
                                        children.splice(i, 1);
                                        break;
                                    }
                                }
                            });
                            this.listenTo(view, 'destroyed:child cancelled:child', this.render);
                            this.listenTo(view, 'alert', this.showMessage);
                            this.$el.html(view.render().el);
                        });
                    },
                    getChild: function(id, callback) {
                        var model = new Models.Child({ Id: id });
                        this.listenToOnce(model, 'sync', callback);
                        model.fetch();
                    }
                }))({
                    el: '#application',
                    collection: new Collections.Parents(
                        @Html.Raw(Json.Encode(Model))
                    )
                }).render();

                return {
                    application: application
                };
            })();

            return {
                Models: Models,
                Collections: Collections,
                Views: Views
            };
        };

        $(function() {
            _.templateSettings = {
                interpolate: /\{\{(.+?)\}\}/g
            };

            var parentChild = new ParentChild();
        });
    </script>
}
