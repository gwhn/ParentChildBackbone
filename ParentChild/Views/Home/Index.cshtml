@model IEnumerable<ParentChild.Models.Parent>

<header>
    <nav class="navbar navbar-static-top navbar-inverse" role="navigation">
        <a class="navbar-brand" href="#">PCB</a>
        <form id="search" class="navbar-form form-inline" role="search">
            <div class="input-group">
                <input type="text" name="query" class="form-control" placeholder="Search"/>
                <span class="input-group-btn">
                    <input type="submit" name="search" class="btn btn-default" value="Go" />
                </span> 
            </div>
        </form>
    </nav>
</header>
<section id="message"></section>
<section id="application"></section>

@section scripts
{
    <script>
        var ParentChild = function() {
            var Models = (function() {
                var Parent = Backbone.Model.extend({
                    idAttribute: 'Id',
                    urlRoot: 'api/parent',
                    validate: function(attrs, options) {
                        if (attrs.Name.length < 1) {
                            return 'Parent name is required';
                        }
                    }
                });

                var Child = Backbone.Model.extend({
                    idAttribute: 'Id',
                    urlRoot: 'api/child',
                    validate: function (attrs, options) {
                        if (attrs.Name.length < 1) {
                            return 'Child name is required';
                        }
                    }
                });

                var Alert = Backbone.Model.extend();
                
                return {
                    Parent: Parent,
                    Child: Child,
                    Alert: Alert
                };
            })();

            var Collections = (function() {
                var Parents = Backbone.Collection.extend({
                    model: Models.Parent,
                    url: 'api/parent'
                });

                var Children = Backbone.Collection.extend({
                    model: Models.Child,
                    url: 'api/child'
                });

                return {
                    Parents: Parents,
                    Children: Children
                };
            })();

            var Views = (function () {
                var ParentsList = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<button type="button" class="btn btn-link" name="createParent">Create Parent</button>'
                    ),
                    events: {
                        'submit': 'createParent',
                        'click button[name=createParent]': 'createParent',
                        'click button[name=editParent]': 'editParent',
                        'click button[name=destroyParent]': 'destroyParent',
                        'click button[name=createChild]': 'createChild',
                        'click button[name=editChild]': 'editChild',
                        'click button[name=destroyChild]': 'destroyChild'
                    },
                    render: function() {
                        this.$el.html(this.template());
                        this.collection.each(function(model) {
                            var view = new ParentsListItem({
                                model: model
                            });
                            this.$el.append(view.render().el);
                        }, this);
                        return this;
                    },
                    createParent: function(event) {
                        event.preventDefault();
                        this.trigger('create:parent');
                        this.remove();
                    },
                    editParent: function(event) {
                        event.preventDefault();
                        this.trigger('edit:parent', $(event.currentTarget).data('id'));
                        this.remove();
                    },
                    destroyParent: function(event) {
                        event.preventDefault();
                        this.trigger('destroy:parent', $(event.currentTarget).data('id'));
                        this.remove();
                    },
                    createChild: function(event) {
                        event.preventDefault();
                        this.trigger('create:child', $(event.currentTarget).data('id'));
                        this.remove();
                    },
                    editChild: function(event) {
                        event.preventDefault();
                        this.trigger('edit:child', $(event.currentTarget).data('id'));
                        this.remove();
                    },
                    destroyChild: function(event) {
                        event.preventDefault();
                        this.trigger('destroy:child', $(event.currentTarget).data('id'));
                        this.remove();
                    }
                });

                var ParentsListItem = Backbone.View.extend({
                    template: _.template(
                        '<label>\n' +
                        '{{Name}}\n' +
                        '<button type="button" class="btn btn-link" name="createChild" data-id="{{Id}}">Create Child</button>\n' +
                        '<button type="button" class="btn btn-link" name="editParent" data-id="{{Id}}">Edit</button>\n' +
                        '<button type="button" class="btn btn-link" name="destroyParent" data-id="{{Id}}">Destroy</button>\n' +
                        '</label>'
                    ),
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        var model = new Models.Parent({
                            Id: this.model.get('Id')
                        });
                        this.listenToOnce(model, 'sync', function () {
                            var view = new ChildrenList({
                                collection: new Collections.Children(
                                    model.get('Children')
                                )
                            });
                            this.$el.append(view.render().el);
                        });
                        model.fetch();
                        return this;
                    }
                });

                var ChildrenList = Backbone.View.extend({
                    tagName: 'ol',
                    render: function() {
                        this.collection.each(function(model) {
                            var view = new ChildrenListItem({
                                model: model
                            });
                            this.$el.append(view.render().el);
                        }, this);
                        return this;
                    }
                });

                var ChildrenListItem = Backbone.View.extend({
                    tagName: 'li',
                    template: _.template(
                        '<label>\n' +
                        '{{Name}}\n' +
                        '<button type="button" class="btn btn-link" name="editChild" data-id="{{Id}}">Edit</button>\n' +
                        '<button type="button" class="btn btn-link" name="destroyChild" data-id="{{Id}}">Destroy</button>\n' +
                        '</label>'
                    ),
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    }
                });

                var ParentCreate = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label class="control-label">\n' +
                        'Parent Name\n' +
                        '<input type="text" class="form-control" name="name" />\n' +
                        '</label>\n' +
                        '<span class="help-block"/>' +
                        '</div>\n' +
                        '<button type="submit" class="btn btn-primary" name="save">Save</button>\n' +
                        '<button type="button" class="btn btn-default" name="cancel">Cancel</button>'
                    ),
                    events: {
                        'click button[name=save]': 'save',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'save'
                    },
                    initialize: function () {
                        this.listenTo(this.model, 'invalid', function(model, error) {
                            this.$('.form-group').addClass('has-error');
                            this.$('.help-block').text(error);
                        });
                        this.listenToOnce(this.model, 'sync', function(model) {
                            this.trigger('created:parent', model);
                            this.trigger('alert', 'success', 'Parent ' + model.get('Name') + ' saved');
                            this.remove();
                        });
                    },
                    render: function() {
                        this.$el.html(this.template());
                        return this;
                    },
                    save: function(event) {
                        event.preventDefault();
                        this.model.save({
                            Name: this.$('input[name=name]').val()
                        });
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.trigger('cancelled:parent');
                        this.trigger('alert', 'warning', 'Create new parent cancelled');
                        this.remove();
                    }
                });

                var ParentEdit = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label class="control-label">\n' +
                        'Parent Name\n' +
                        '<input type="text" class="form-control" name="name" value="{{Name}}" />\n' +
                        '</label>\n' +
                        '<span class="help-block"/>' +
                        '</div>\n' +
                        '<button type="submit" class="btn btn-primary" name="update">Update</button>\n' +
                        '<button type="button" class="btn btn-default" name="cancel">Cancel</button>'
                    ),
                    events: {
                        'click button[name=update]': 'update',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'update'
                    },
                    initialize: function() {
                        this.listenTo(this.model, 'invalid', function (model, error) {
                            this.$('.form-group').addClass('has-error');
                            this.$('.help-block').text(error);
                        });
                        this.listenToOnce(this.model, 'sync', function (model) {
                            this.trigger('updated:parent', model);
                            this.trigger('alert', 'success', 'Parent ' + model.get('Name') + ' updated');
                            this.remove();
                        });
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    update: function(event) {
                        event.preventDefault();
                        this.model.save({
                            Name: this.$('input[name=name]').val()
                        });
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.trigger('cancelled:parent');
                        this.trigger('alert', 'warning', 'Edit parent ' + this.model.get('Name') + ' cancelled');
                        this.remove();
                    }
                });

                var ParentDestroy = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label>\n' +
                        'Are you sure you want to destroy {{Name}}?\n' +
                        '</label>\n' +
                        '</div>\n' +
                        '<button type="button" class="btn btn-danger" name="confirm">Yes</button>\n' +
                        '<button type="submit" class="btn btn-primary" name="cancel">No</button>'
                    ),
                    events: {
                        'click button[name=confirm]': 'confirm',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'cancel'
                    },
                    initialize: function() {
                        this.listenToOnce(this.model, 'sync', function(model) {
                            this.trigger('destroyed:parent');
                            this.trigger('alert', 'success', 'Parent ' + model.get('Name') + ' destroyed');
                            this.remove();
                        });
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    confirm: function(event) {
                        event.preventDefault();
                        this.model.destroy();
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.trigger('cancelled:parent');
                        this.trigger('alert', 'warning', 'Destroy parent ' + this.model.get('Name') + ' cancelled');
                        this.remove();
                    }
                });

                var ChildCreate = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label class="control-label">\n' +
                        'Child Name\n' +
                        '<input type="text" class="form-control" name="name" />\n' +
                        '</label>\n' +
                        '<span class="help-block"/>' +
                        '</div>\n' +
                        '<button type="submit" class="btn btn-primary" name="save">Save</button>\n' +
                        '<button type="button" class="btn btn-default" name="cancel">Cancel</button>'
                    ),
                    events: {
                        'click button[name=save]': 'save',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'save'
                    },
                    initialize: function() {
                        this.listenTo(this.model, 'invalid', function (model, error) {
                            this.$('.form-group').addClass('has-error');
                            this.$('.help-block').text(error);
                        });
                        this.listenToOnce(this.model, 'sync', function (model) {
                            this.trigger('created:child', model);
                            this.trigger('alert', 'success', 'Child ' + model.get('Name') + ' saved');
                            this.remove();
                        });
                    },
                    render: function() {
                        this.$el.html(this.template());
                        return this;
                    },
                    save: function(event) {
                        event.preventDefault();
                        this.model.save({
                            Name: this.$('input[name=name]').val()
                        });
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.trigger('cancelled:child');
                        this.trigger('alert', 'warning', 'Create new child cancelled');
                        this.remove();
                    }
                });

                var ChildEdit = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label class="control-label">\n' +
                        'Child Name\n' +
                        '<input type="text" class="form-control" name="name" value="{{Name}}" />\n' +
                        '</label>\n' +
                        '<span class="help-block"/>' +
                        '</div>\n' +
                        '<button type="submit" class="btn btn-primary" name="update">Update</button>\n' +
                        '<button type="button" class="btn btn-default" name="cancel">Cancel</button>'
                    ),
                    events: {
                        'click button[name=update]': 'update',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'update'
                    },
                    initialize: function() {
                        this.listenTo(this.model, 'invalid', function (model, error) {
                            this.$('.form-group').addClass('has-error');
                            this.$('.help-block').text(error);
                        });
                        this.listenToOnce(this.model, 'sync', function (model) {
                            this.trigger('updated:child', model);
                            this.trigger('alert', 'success', 'Child ' + model.get('Name') + ' updated');
                            this.remove();
                        });
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    update: function(event) {
                        event.preventDefault();
                        this.model.save({
                            Name: this.$('input[name=name]').val()
                        });
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.trigger('cancelled:child');
                        this.trigger('alert', 'warning', 'Edit child ' + this.model.get('Name') + ' cancelled');
                        this.remove();
                    }
                });

                var ChildDestroy = Backbone.View.extend({
                    tagName: 'form',
                    template: _.template(
                        '<div class="form-group">\n' +
                        '<label>\n' +
                        'Are you sure you want to destroy {{Name}}?\n' +
                        '</label>\n' +
                        '</div>\n' +
                        '<button type="button" class="btn btn-danger" name="confirm">Yes</button>\n' +
                        '<button type="submit" class="btn btn-primary" name="cancel">No</button>'
                    ),
                    events: {
                        'click button[name=confirm]': 'confirm',
                        'click button[name=cancel]': 'cancel',
                        'submit': 'cancel'
                    },
                    initialize: function() {
                        this.listenToOnce(this.model, 'sync', function(model) {
                            this.trigger('destroyed:child');
                            this.trigger('alert', 'success', 'Child ' + model.get('Name') + ' destroyed');
                            this.remove();
                        });
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    },
                    confirm: function(event) {
                        event.preventDefault();
                        this.model.destroy();
                    },
                    cancel: function(event) {
                        event.preventDefault();
                        this.trigger('cancelled:child');
                        this.trigger('alert', 'warning', 'Destroy child ' + this.model.get('Name') + ' cancelled');
                        this.remove();
                    }
                });

                var Message = Backbone.View.extend({
                    template: _.template(
                        '<div class="alert alert-{{Type}}">{{Message}}</div>'
                    ),
                    initialize: function() {
                        this.listenTo(this.model, 'change', this.render);
                    },
                    render: function() {
                        this.$el.html(this.template(this.model.toJSON()));
                        return this;
                    }
                });
                
                var Search = Backbone.View.extend({
                    events: {
                        'submit': 'search'
                    },
                    search: function(event) {
                        event.preventDefault();
                        this.trigger('search', this.$('input[name=query]').val());
                    }
                });

                var Application = Backbone.View.extend({
                    initialize: function () {
                        this.search = new Search({
                            el: '#search'
                        });
                        this.listenTo(this.search, 'search', function(query) {
                            alert('search ' + query);
                        });
                        this.message = new Message({
                            el: '#message',
                            model: new Models.Alert()
                        });
                    },
                    render: function() {
                        var view = new ParentsList({
                            collection: this.collection
                        });
                        this.listenTo(view, 'create:parent', this.createParent);
                        this.listenTo(view, 'edit:parent', this.editParent);
                        this.listenTo(view, 'destroy:parent', this.destroyParent);
                        this.listenTo(view, 'create:child', this.createChild);
                        this.listenTo(view, 'edit:child', this.editChild);
                        this.listenTo(view, 'destroy:child', this.destroyChild);
                        this.$el.html(view.render().el);
                    },
                    showMessage: function(type, message) {
                        this.message.model.set({
                            Type: type,
                            Message: message
                        });
                    },
                    createParent: function() {
                        var view = new ParentCreate({
                            model: new Models.Parent()
                        });
                        this.listenTo(view, 'created:parent', function(model) {
                            this.collection.add(model);
                        });
                        this.listenTo(view, 'created:parent cancelled:parent', this.render);
                        this.listenTo(view, 'alert', this.showMessage);
                        this.$el.html(view.render().el);
                    },
                    editParent: function(id) {
                        var view = new ParentEdit({
                            model: this.collection.get(id)
                        });
                        this.listenTo(view, 'updated:parent cancelled:parent', this.render);
                        this.listenTo(view, 'alert', this.showMessage);
                        this.$el.html(view.render().el);
                    },
                    destroyParent: function(id) {
                        var view = new ParentDestroy({
                            model: this.collection.get(id)
                        });
                        this.listenTo(view, 'destroyed:parent cancelled:parent', this.render);
                        this.listenTo(view, 'alert', this.showMessage);
                        this.$el.html(view.render().el);
                    },
                    createChild: function(parentId) {
                        var view = new ChildCreate({
                            model: new Models.Child({
                                ParentId: parentId
                            })
                        });
                        this.listenTo(view, 'created:child cancelled:child', this.render);
                        this.listenTo(view, 'alert', this.showMessage);
                        this.$el.html(view.render().el);
                    },
                    editChild: function (id) {
                        this.getChild(id, function(model) {
                            var view = new ChildEdit({
                                model: model
                            });
                            this.listenTo(view, 'updated:child cancelled:child', this.render);
                            this.listenTo(view, 'alert', this.showMessage);
                            this.$el.html(view.render().el);
                        });
                    },
                    destroyChild: function (id) {
                        this.getChild(id, function (model) {
                            var view = new ChildDestroy({
                                model: model
                            });
                            this.listenTo(view, 'destroyed:child cancelled:child', this.render);
                            this.listenTo(view, 'alert', this.showMessage);
                            this.$el.html(view.render().el);
                        });
                    },
                    getChild: function(id, callback) {
                        var model = new Models.Child({ Id: id });
                        this.listenToOnce(model, 'sync', callback);
                        model.fetch();
                    }
                });

                return {
                    Application: Application
                };
            })();

            return {
                Models: Models,
                Collections: Collections,
                Views: Views
            };
        };

        $(function() {
            _.templateSettings = {
                interpolate: /\{\{(.+?)\}\}/g
            };

            var parentChild = new ParentChild();

            var collection = new parentChild.Collections.Parents(
                @Html.Raw(Json.Encode(Model))
            );

            var application = new parentChild.Views.Application({
                el: '#application',
                collection: collection
            });

            application.render();
        });
    </script>
}
